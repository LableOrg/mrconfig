#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import argparse
import sys
import os
import tempfile
import configparser
import itertools
import textwrap
import logging
from subprocess import call
from os.path import expanduser
from pathlib import Path

from kazoo.client import KazooClient
from kazoo.client import KazooState
from kazoo.exceptions import NoNodeError, NotEmptyError

# Program version.
VERSION = "1.0"

# The possible locations of this program's configuration file.
CONF_IN_HOME_DIR = expanduser("~/.mrconfig")
ETC_DIRS = ["/etc", "/usr/local/etc"]
CONF_IN_ETC = "mrconfig.conf"

EDITOR = os.environ.get("EDITOR", "vim")
DEFAULT_TEMP_FILE_EXTENSION = ".txt"

options = {"configuration_znode": "/"}
zookeeper = None


def read_from_config(path):
    """Read the options needed to connect to a ZooKeeper quorum from a file."""

    config = configparser.ConfigParser()
    try:
        with open(path, "r") as conf:
            # Prepend the default section header ([root]) to the config file.
            config.read_file(itertools.chain(["[root]"], conf), source=path)
    except IOError:
        logging.warn("Failed to read config file at {0}.".format(path))
        return

    for option in ("zookeeper_quorum", "configuration_znode", "default_file_extension"):
        try:
            options[option] = config.get("root", option)
            logging.info(
                "Read option `{0}' from {1}: {2}".format(option, path, options[option])
            )
        except configparser.NoOptionError:
            logging.info("Option `{0}' not configured in settings file.".format(option))


def assert_options_or_exit(quiet):
    """Check if the required options were set, and quit if that is not the
    case."""

    if "zookeeper_quorum" not in options:
        if not quiet:
            message = (
                "I can't connect to the ZooKeeper quorum without its "
                "address and (if not specified as part of the connect "
                "string) the path to the configuration root znode. "
                "Either add a configuration file in ~/.mrconfig or "
                "/etc/mrconfig.conf, or pass these parameters as "
                "arguments."
            )
            print("Hello there!")
            print("")
            print(textwrap.fill(message, 80))
        sys.exit(2)


def assert_config_znode_or_quit(znode, quiet=False):
    """Check if a node exists, and quit if it doesn't."""

    if zookeeper.exists(znode) is None:
        if not quiet:
            print("Znode {0} does not exist (yet).".format(znode), file=sys.stderr)
        exit_with_error()


def assert_config_parent_node_exists_or_quit(quiet=False):
    """Assert that the node that holds all configuration files exists."""

    znode = options["configuration_znode"]
    assert_config_znode_or_quit(znode, quiet)


def assert_node_is_not_a_virtual_dir_or_quit(conf_node, quiet=False):
    """Assert that a (proposed) node does not clash with existing nodes.

    I.e., check that the new node name does not occur as part of an existing
    node name's virtual path. For example, if there is a node 'foo--bar.yaml'
    (virtual path 'foo/bar.yaml') then a node named 'foo' is forbidden, because
    it already 'exists' as part of another node's virtual path.
    """

    znode = options["configuration_znode"]
    children = zookeeper.get_children(znode)
    for child in children:
        ref = znode + "/" + child
        if ref.startswith(conf_node + "--"):
            print(
                "Node {0} is a (virtual) directory and cannot be "
                "overwritten.".format(conf_node)
            )
            exit_with_error()


def full_znode_path(znode):
    parts = options["zookeeper_quorum"].split("/", 1)
    if znode.startswith("/"):
        znode = znode[1:]
    if len(parts) == 1:
        return "/" + znode
    else:
        chroot = parts[1]
        if not chroot.endswith("/"):
            chroot = chroot + "/"
        if not chroot.startswith("/"):
            chroot = "/" + chroot
        return chroot + znode


def convert_name_to_znode_name(config_name):
    """Convert a virtual path (e.g., 'includes/defaults.yaml') to the zookeeper
    node name (if the configuration node is 'configs', this would be
    'configs/includes--defaults.yaml').
    """

    if config_name.startswith("/"):
        config_name = config_name[1:]

    znode = options["configuration_znode"]
    if not znode.endswith("/"):
        znode = znode + "/"

    return znode + config_name.replace("/", "--")


def connect(quiet, read_only=False):
    """Connect to the ZooKeeper quorum, and assert that the root configuration
    node exists."""

    assert_options_or_exit(quiet)

    logging.info(
        "Connecting to ZooKeeper quorum at {0}. Znode is {1}.".format(
            options["zookeeper_quorum"], options["configuration_znode"]
        )
    )

    global zookeeper
    zookeeper = KazooClient(hosts=options["zookeeper_quorum"], read_only=read_only)
    zookeeper.start()
    if not zookeeper.state == KazooState.CONNECTED:
        if not quiet:
            print(
                "Connection to ZooKeeper quorum failed, check your " "settings.",
                file=sys.stderr,
            )
        exit_with_error()

    assert_config_znode_or_quit(options["configuration_znode"], quiet)


def close_connection():
    """Close the ZooKeeper connection."""
    if zookeeper is not None:
        zookeeper.stop()
        zookeeper.close()


def exit_with_error():
    """"Close the ZooKeeper connection and exit with a non-zero exit status."""
    close_connection()
    sys.exit(2)


def read_from_file_or_stdin(filename):
    """Read the contents of named file, or from stdin if filename is '-'."""
    if filename == "-":
        # Read from stdin when - is passed as filename.
        content = sys.stdin.read()
    else:
        with open(filename, "r") as f:
            content = f.read()
    return content


def set_config(name, content, quiet):
    """Upload the contents for the named configuration node."""

    conf_node = convert_name_to_znode_name(name)
    assert_config_parent_node_exists_or_quit(quiet)
    assert_node_is_not_a_virtual_dir_or_quit(conf_node, quiet)

    conf_node_exists = zookeeper.exists(conf_node) is not None

    data = content.encode("utf-8")

    # noinspection PyBroadException
    try:
        if conf_node_exists:
            zookeeper.set(conf_node, data)
        else:
            zookeeper.create(conf_node, data)
    except BaseException:
        # Catch all exceptions here.
        if not quiet:
            print("Unexpected error:", sys.exc_info()[0])
        exit_with_error()
    else:
        if not quiet:
            print("Node {0} (name: {1}) successfully written.".format(conf_node, name))


def node_has_children(name):
    """Return true if a node has children."""

    conf_node = convert_name_to_znode_name(name)
    try:
        children = zookeeper.get_children(conf_node)
    except NoNodeError:
        return False

    return len(children) != 0


def get_config(name, quiet, raise_if_no_such_node=False):
    """Download the contents of a node."""

    conf_node = convert_name_to_znode_name(name)
    try:
        data, stat = zookeeper.get(conf_node)
    except NoNodeError:
        if raise_if_no_such_node:
            raise
        if not quiet:
            print(
                "Node does not exist: {0} (name: {1})".format(conf_node, name),
                file=sys.stderr,
            )
        exit_with_error()
    else:
        return data.decode("utf-8").rstrip()


def delete_node(name, quiet):
    """Delete a node, if it exists."""

    target_node = convert_name_to_znode_name(name)

    try:
        zookeeper.delete(target_node)
    except NoNodeError:
        # Node is already gone, but we treat this as success because deleting
        # the node was the goal.
        if not quiet:
            print("Node does not exist: {0} (name: {1}).".format(target_node, name))
    except NotEmptyError:
        # Node contains child nodes.
        if not quiet:
            print("Node is not empty (remove its children via zkcli first).")
            print(target_node)
        return False
    else:
        if not quiet:
            print(
                "Successfully deleted node {0} (name: {1}).".format(target_node, name)
            )

    return True


def color(text, fg=2, bg=None, bold=False, underline=False, italic=False):
    codes = []
    if fg is not None:
        codes.append(str(30 + fg))
    if bg is not None:
        codes.append(str(40 + fg))
    if bold:
        codes.append("1")
    if italic:
        codes.append("3")
    if underline:
        codes.append("4")

    return "\x1b[{0}m{1}\x1b[0m".format(";".join(codes), text)


def list_configs():
    """Print a list of all the configuration nodes directly under the parent
    node."""

    znode = options["configuration_znode"]
    print(
        color(
            "Configuration files ({0})".format(full_znode_path(znode)),
            fg=None,
            bold=True,
        )
    )

    children = zookeeper.get_children(znode)
    if len(children) == 0:
        print("  (no child nodes)")
        return

    children.sort()
    tree_map = {}

    for child in children:
        path_parts = child.split("--")
        parent = ""
        for part in path_parts:
            if parent not in tree_map:
                tree_map[parent] = []
            if part not in tree_map[parent]:
                tree_map[parent].append(part)
            parent = parent + "/" + part

    list_dir(tree_map, "", "")


def dump_configs(dest_dir_name):
    """Dump all configuration nodes to file."""

    znode = options["configuration_znode"]
    children = zookeeper.get_children(znode)

    dest_dir = Path(dest_dir_name)
    if not dest_dir.exists():
        dest_dir.mkdir(parents=True)
    elif not dest_dir.is_dir():
        print("A file named {0} already exists.".format(dest_dir_name), file=sys.stderr)
        exit_with_error()

    for child in children:
        try:
            data, stat = zookeeper.get(child)
        except NoNodeError:
            # Probably just removed during the time we listed the files and got
            # this one.
            pass
        else:
            dest_file = dest_dir / child.replace("--", "/")
            dest_file.parent.mkdir(parents=True, exist_ok=True)
            dest_file.write_bytes(data)


def list_dir(tree_map, znode, indent):
    """Print all descendants of a single znode as a tree via recursion."""

    children = tree_map[znode]

    # Print the children with a character-art path in front of it.
    prev = None
    for child in children:
        if prev is not None:
            title = prev
            if znode + "/" + prev in tree_map:
                title = color(prev, fg=7, underline=True, italic=True)
            print("{0} {1} {2}".format(indent, color("├", 3), title))
            if znode + "/" + prev in tree_map:
                list_dir(tree_map, znode + "/" + prev, indent + color(" │ ", 3))
        prev = child

    title = prev
    if znode + "/" + prev in tree_map:
        title = color(prev, fg=7, underline=True, italic=True)
    print("{0} {1} {2}".format(indent, color("└", 3), title))
    if znode + "/" + prev in tree_map:
        list_dir(tree_map, znode + "/" + prev, indent + "   ")


def edit_config_with_favorite_editor(name, content):
    """Edit text in $EDITOR, or vim if no editor is configured."""

    file_extension = os.path.splitext(name)[1]
    if file_extension == "":
        if "default_file_extension" in options:
            suffix = options["default_file_extension"]
        else:
            suffix = DEFAULT_TEMP_FILE_EXTENSION
    else:
        suffix = file_extension

    # Ensure a period is placed before the file extension.
    if suffix[0] != ".":
        suffix = "." + suffix

    with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as temp_file:
        logging.info("Writing content to temporary file at: {0}".format(temp_file.name))
        temp_file.write(bytes(content, "UTF-8"))
        temp_file.flush()
        call([EDITOR, temp_file.name])
        temp_file_name = temp_file.name

    with open(temp_file_name, "r") as temp_file:
        new_content = temp_file.read()

    os.remove(temp_file_name)

    return new_content


def user_confirms_action(query, name):
    """Ask the user if he really intended to perform the requested action, and
    return True if he did."""
    query += " (y/n): "
    print(query.format(name), end="")
    while True:
        try:
            choice = input().lower()
            if choice == "y":
                return True
            elif choice == "n":
                return False
        except KeyboardInterrupt:
            # Clean exit on Ctrl+C.
            exit_with_error()


def main():
    """Gather arguments and prepare logging."""

    # Configure argparse with all the options for this program.
    parser = argparse.ArgumentParser(
        add_help=False,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Manage configuration files stored in a ZooKeeper " "quorum.",
        epilog="To write the contents of stdin to a configuration node, "
        "do something like this: "
        "\n\n"
        "    cat MyConf.yml | mrconfig --set NAME -"
        "\n\n",
    )

    # General help and usage.
    parser.add_argument(
        "-h", "--help", help="Show this help message and exit.", action="help"
    )
    parser.add_argument(
        "--version",
        action="version",
        help="Show program's version number and exit.",
        version="%(prog)s " + VERSION,
    )
    parser.add_argument(
        "-v",
        "--verbose",
        default=0,
        help="Be a bit more chatty about what we're doing.",
        action="count",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        action="store_true",
        help="Suppress all output (overrides verbosity).",
    )

    # The main modes of operation. These are mutually exclusive; only one task
    # can be performed at a time.
    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument(
        "-l",
        "--list",
        action="store_true",
        help="List all the configs stored in the ZooKeeper quorum.",
    )
    mode_group.add_argument(
        "--set",
        nargs=2,
        metavar=("NAME", "FILE"),
        help="Upload a configuration file and place it under this name.",
    )
    mode_group.add_argument(
        "--get", metavar="NAME", help="Download named config and output it to stdout."
    )
    mode_group.add_argument(
        "--edit", metavar="NAME", help="Edit named config in an editor."
    )
    mode_group.add_argument(
        "--move",
        nargs=2,
        metavar=("SOURCE", "TARGET"),
        help="Move a config to a new location.",
    )
    mode_group.add_argument(
        "--copy",
        nargs=2,
        metavar=("SOURCE", "TARGET"),
        help="Copy an existing config to another location.",
    )
    mode_group.add_argument(
        "--delete",
        metavar="NAME",
        help="Delete named config. This action cannot be undone!",
    )
    mode_group.add_argument(
        "--delete-without-confirmation",
        metavar="NAME",
        help="Delete named config without asking for confirmation. "
        "This action cannot be undone!",
    )
    mode_group.add_argument(
        "--dump",
        nargs="?",
        metavar="DIR",
        const=".",
        help="Dump all the configs stored in the ZooKeeper quorum to "
        "file. By default all files will be dumped in the "
        "current working directory; use DIR to change this.",
    )

    # ZooKeeper settings. These override any settings found in the mrconfig
    # settings file.
    parser.add_argument(
        "--zookeepers", help="Comma-separated address of the ZooKeeper quorum."
    )
    parser.add_argument("--config-znode", help="Path to the root configuration znode.")

    if len(sys.argv) == 1:
        # Print help when no arguments are passed to us.
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    verbosity = args.verbose
    quiet = False

    if args.quiet:
        verbosity = -1
        quiet = True

    # Have the logging used match the verbosity desired by the user.
    if verbosity == 1:
        logging.basicConfig(level=logging.WARN)
    elif verbosity > 1:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.ERROR)

    if os.path.isfile(CONF_IN_HOME_DIR):
        # User settings, these take precedence over system settings.
        read_from_config(CONF_IN_HOME_DIR)
    else:
        for conf_dir in ETC_DIRS:
            conf_file = os.path.join(conf_dir, CONF_IN_ETC)
            if os.path.isfile(conf_file):
                # System settings.
                read_from_config(conf_file)
                break

    # Optional arguments. Usually these would be loaded from a configuration
    # file. This provides a way to override that.
    if args.zookeepers:
        options["zookeeper_quorum"] = args.zookeepers
    if args.config_znode:
        options["configuration_znode"] = args.config_znode

    # Choose a mode of operation.
    if args.list:
        # List all configuration nodes.
        connect(quiet, read_only=True)
        list_configs()
        close_connection()
    elif args.dump:
        # Dump all configuration nodes to file.
        connect(quiet, read_only=True)
        dump_configs(args.dump)
        close_connection()
    elif args.set:
        # Set configuration.
        connect(quiet)
        new_config = read_from_file_or_stdin(args.set[1])
        set_config(args.set[0], new_config, quiet)
        close_connection()
    elif args.get:
        # Get configuration and output to stdout.
        connect(quiet, read_only=True)
        print(get_config(args.get, quiet))
        close_connection()
    elif args.edit:
        connect(quiet)
        old_config = ""
        try:
            # Read the existing configuration node, if it exists.
            old_config = get_config(args.edit, quiet, raise_if_no_such_node=True)
        except NoNodeError:
            # Node does not exist yet. Ask user if they want to create one.
            if not user_confirms_action(
                "Configuration node '{0}' does not exist, do you want to " "create it?",
                args.edit,
            ):
                exit_with_error()
        new_config = edit_config_with_favorite_editor(args.edit, old_config)
        set_config(args.edit, new_config, quiet)
        close_connection()
    elif args.move:
        connect(quiet)
        if node_has_children(args.move[0]):
            print(
                "Node '{0}' has children. Move or delete these first.".format(
                    args.move[0]
                )
            )
            sys.exit(1)
        content = get_config(args.move[0], quiet)
        target = args.move[1]
        if target.endswith("/"):
            target = target + args.move[0].split("/")[-1]
        set_config(target, content, quiet)
        delete_node(args.move[0], quiet=True)
        close_connection()
    elif args.copy:
        connect(quiet)
        content = get_config(args.copy[0], quiet)
        target = args.copy[1]
        if target.endswith("/"):
            target = target + args.copy[0].split("/")[-1]
        set_config(target, content, quiet)
        close_connection()
    elif args.delete:
        # Remove a configuration node, but only if the user confirms this
        # action.
        if not user_confirms_action(
            "Are you sure you want to delete configuration node '{0}'?", args.delete
        ):
            exit_with_error()
        connect(quiet)
        if not delete_node(args.delete, quiet):
            sys.exit(1)
        close_connection()
    elif args.delete_without_confirmation:
        # Remove a configuration node.
        connect(quiet)
        if not delete_node(args.delete_without_confirmation, quiet):
            sys.exit(1)
        close_connection()
    else:
        if not quiet:
            print(
                "Please choose the operation you want to perform: "
                "--list, --get, --set, or --edit."
            )
            print()
            parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
